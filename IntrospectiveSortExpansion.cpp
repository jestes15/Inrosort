#include "IntroSort.hpp"

#include <iostream>
#include <algorithm>
#include <functional>
#include <iostream>
#include <numeric>

bool test_depth_limit() noexcept(false)
{
    return (IntroSort::depthLimit(200) == 10);
}

bool test_depth_limit_array() noexcept(false)
{
    int constexpr arr[] = {
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
            11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
            21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
            31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
            41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
            51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
            61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
            71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
            81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
            91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 106, 107, 108,
            109, 110, 111, 112, 113, 114, 115, 116,
            117, 118, 119, 120, 121, 122, 123, 124,
            125, 126, 127, 128, 129, 130, 131, 132,
            133, 134, 135, 136, 137, 138, 139, 140,
            141, 142, 143, 144, 145, 146, 147, 148,
            149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 161, 162, 163, 164,
            165, 166, 167, 168, 169, 170, 171, 172,
            173, 174, 175, 176, 177, 178, 179, 180,
            181, 182, 183, 184, 185, 186, 187, 188,
            189, 190, 191, 192, 193, 194, 195, 196,
            197, 198, 199
    };
    return IntroSort::depthLimit(static_cast<int>(std::size(arr))) == 10;
}

bool test_depth_limit_std_vector() noexcept(false)
{
    std::vector<int> arr;
    arr.reserve(200);
    for (auto i = 0; i < 200; i++)
        arr.emplace_back(0);

    return (IntroSort::depthLimit(static_cast<int>(arr.size())) == 10);
}

bool test_depth_limit_std_array() noexcept(false)
{
    std::array<int, 200> arr = {};
    arr.fill(2);
    return (IntroSort::depthLimit(static_cast<int>(arr.size())) == 10);
}

bool test_swap() noexcept(false)
{
    auto num_one = 73, num_two = 20;
    IntroSort::swap(&num_one, &num_two);
    return (num_two == 73) && (num_one == 20);
}

bool test_swap_array() noexcept(false)
{
    int arr[] = {0, 1, 2, 3, 4};
    IntroSort::swap(&arr[0], &arr[1]);
    return (arr[0] == 1) && (arr[1] == 0);
}

bool test_swap_std_vector() noexcept(false)
{
    std::vector<int> arr;
    arr.reserve(200);
    for (auto i = 0; i < 200; i++)
        arr.emplace_back(i);

    IntroSort::swap(&arr.at(0), &arr.at(1));
    return (arr.at(1) == 0) && (arr.at(0) == 1);
}

bool test_swap_std_array() noexcept(false)
{
    std::array<int, 200> arr = {};
    arr.fill(2);
    arr.at(0) = 0;

    IntroSort::swap(&arr.at(0), &arr.at(1));
    return arr.at(1) == 0 && arr.at(0) == 2;
}

bool test_partition_array() noexcept(false)
{
    int arr[] = {1, 2, 3, 6, 3, 2, 6, 1, 6};
    int constexpr final_arr[] = {1, 2, 3, 6, 3, 2, 6, 1, 6};

    IntroSort::partition(arr, 0, static_cast<int>(std::size(arr)) - 1);

    return std::equal(std::begin(arr), std::end(arr), std::begin(final_arr));
}

bool test_partition_std_vector() noexcept(false)
{
    std::vector<int> arr = {1, 2, 3, 6, 3, 2, 6, 1, 6};
    std::vector<int> const final_arr = {1, 2, 3, 6, 3, 2, 6, 1, 6};
    IntroSort::partition(arr, 0, static_cast<int>(arr.size()) - 1);

    return std::equal(std::begin(arr), std::end(arr), std::begin(final_arr));
}

bool test_partition_std_array() noexcept(false)
{
    std::array<int, 9> arr = {1, 2, 3, 6, 3, 2, 6, 1, 6};
    std::array<int, 9> constexpr final_arr = {1, 2, 3, 6, 3, 2, 6, 1, 6};
    IntroSort::partition(arr, 0, static_cast<int>(arr.size()) - 1);

    return std::equal(std::begin(arr), std::end(arr), std::begin(final_arr));
}

bool test_quick_sort_array()
{
    int arr[] = {1, 2, 3, 6, 3, 2, 6, 1, 7};
    int constexpr final_arr[] = {1, 1, 2, 2, 3, 3, 6, 6, 7};
    IntroSort::quickSort(arr, 0, static_cast<int>(std::size(arr)) - 1);
    return std::equal(std::begin(arr), std::end(arr), std::begin(final_arr));
}

bool test_quick_sort_std_vector()
{
    std::vector<int> arr = {1, 2, 3, 6, 3, 2, 6, 1, 6};
    std::vector<int> const final_arr = {1, 1, 2, 2, 3, 3, 6, 6, 6};
    IntroSort::quickSort(arr, 0, static_cast<int>(arr.size()) - 1);
    return std::equal(std::begin(arr), std::end(arr), std::begin(final_arr));
}

bool test_quick_sort_std_array()
{
    std::array<int, 9> arr = {1, 2, 3, 6, 3, 2, 6, 1, 6};
    std::array<int, 9> const final_arr = {1, 1, 2, 2, 3, 3, 6, 6, 6};
    IntroSort::quickSort(arr, 0, static_cast<int>(arr.size()) - 1);
    return std::equal(std::begin(arr), std::end(arr), std::begin(final_arr));
}

bool test_make_heap_array()
{
    int arr[] = {1, 2, 3, 6, 3, 2, 6, 1, 6};
    int constexpr final_arr[] = {3, 2, 6, 6, 3, 2, 1, 1, 6};
    IntroSort::makeHeap(arr, 9, 0);
    return std::equal(std::begin(arr), std::end(arr), std::begin(final_arr));
}

bool test_make_heap_std_vector()
{
    std::vector<int> arr = {1, 2, 3, 6, 3, 2, 6, 1, 6};
    std::vector<int> const final_arr = {3, 2, 6, 6, 3, 2, 1, 1, 6};
    IntroSort::makeHeap(arr, 9, 0);
    return std::equal(std::begin(arr), std::end(arr), std::begin(final_arr));
}

bool test_make_heap_std_array()
{
    std::array<int, 9> arr = {1, 2, 3, 6, 3, 2, 6, 1, 6};
    std::array<int, 9> constexpr final_arr = {3, 2, 6, 6, 3, 2, 1, 1, 6};
    IntroSort::makeHeap(arr, 9, 0);
    return std::equal(std::begin(arr), std::end(arr), std::begin(final_arr));
}

bool test_heap_sort_array()
{
    int arr[] = {
            523, 6107, 9436, 1693, 8899, 2324, 9632, 1073, 1626, 4531, 9728, 9776, 6781, 7619, 3011, 4507, 3945, 9592, 768,
            8688, 5931, 5878, 2429, 2678, 8712, 1232, 9519, 3906, 79, 4800, 1858, 7984, 5192, 6806, 1064, 6919, 1812, 437,
            6459, 8502, 8594, 9110, 2051, 6679, 6142, 23, 4135, 8427, 4322, 2502, 4214, 63, 6201, 7039, 8131, 1227, 4141,
            3590, 5488, 6646, 2693, 4091, 6735, 9522, 5276, 3973, 5448, 5928, 7428, 811, 6795, 7131, 7179, 7608, 3897, 4307,
            8610, 8444, 4394, 963, 4250, 9950, 2136, 7759, 8408, 8256, 8562, 823, 7156, 3002, 4889, 7445, 8601, 822, 8181,
            4196, 211, 1753, 1908, 2618, 2862, 7768, 3524, 9912, 1233, 17, 1078, 3741, 4712, 884, 91, 3650, 4000, 6084,
            3313, 2946, 6768, 9518, 6863, 2539, 4229, 4426, 4418, 3055, 5201, 8925, 9037, 429, 3, 17, 5487, 8522, 7227,
            2455, 9313, 4846, 7940, 7731, 9927, 2392, 8202, 7301, 8218, 7004, 76, 7187, 5635, 5939, 2501, 6522, 7244, 5623,
            4757, 1327, 692, 2007, 4308, 4539, 9729, 672, 5741, 6269, 1618, 6341, 5646, 654, 8543, 636, 5716, 5319, 6119,
            2882, 5594, 9067, 174, 3883, 8034, 8434, 4800, 9901, 7880, 894, 8857, 9977, 2991, 5035, 3246, 6681, 4739, 2768,
            5878, 5005, 5101, 5520, 1873, 7073, 1047, 618, 4154, 2963
    };
    int constexpr final_array[] = {
            3, 17, 17, 23, 63, 76, 79, 91, 174, 211, 429, 437, 523, 618, 636, 654, 672, 692, 768, 811, 822, 823, 884, 894,
            963, 1047, 1064, 1073, 1078, 1227, 1232, 1233, 1327, 1618, 1626, 1693, 1753, 1812, 1858, 1873, 1908, 2007, 2051,
            2136, 2324, 2392, 2429, 2455, 2501, 2502, 2539, 2618, 2678, 2693, 2768, 2862, 2882, 2946, 2963, 2991, 3002,
            3011, 3055, 3246, 3313, 3524, 3590, 3650, 3741, 3883, 3897, 3906, 3945, 3973, 4000, 4091, 4135, 4141, 4154,
            4196, 4214, 4229, 4250, 4307, 4308, 4322, 4394, 4418, 4426, 4507, 4531, 4539, 4712, 4739, 4757, 4800, 4800,
            4846, 4889, 5005, 5035, 5101, 5192, 5201, 5276, 5319, 5448, 5487, 5488, 5520, 5594, 5623, 5635, 5646, 5716,
            5741, 5878, 5878, 5928, 5931, 5939, 6084, 6107, 6119, 6142, 6201, 6269, 6341, 6459, 6522, 6646, 6679, 6681,
            6735, 6768, 6781, 6795, 6806, 6863, 6919, 7004, 7039, 7073, 7131, 7156, 7179, 7187, 7227, 7244, 7301, 7428,
            7445, 7608, 7619, 7731, 7759, 7768, 7880, 7940, 7984, 8034, 8131, 8181, 8202, 8218, 8256, 8408, 8427, 8434,
            8444, 8502, 8522, 8543, 8562, 8594, 8601, 8610, 8688, 8712, 8857, 8899, 8925, 9037, 9067, 9110, 9313, 9436,
            9518, 9519, 9522, 9592, 9632, 9728, 9729, 9776, 9901, 9912, 9927, 9950, 9977
    };
    IntroSort::heapSort(arr, static_cast<int>(std::size(arr)));

    return std::equal(std::begin(arr), std::end(arr), std::begin(final_array));
}

bool test_heap_sort_std_vector()
{
    std::vector<int> arr = {
            523, 6107, 9436, 1693, 8899, 2324, 9632, 1073, 1626, 4531, 9728, 9776, 6781, 7619, 3011, 4507, 3945, 9592, 768,
            8688, 5931, 5878, 2429, 2678, 8712, 1232, 9519, 3906, 79, 4800, 1858, 7984, 5192, 6806, 1064, 6919, 1812, 437,
            6459, 8502, 8594, 9110, 2051, 6679, 6142, 23, 4135, 8427, 4322, 2502, 4214, 63, 6201, 7039, 8131, 1227, 4141,
            3590, 5488, 6646, 2693, 4091, 6735, 9522, 5276, 3973, 5448, 5928, 7428, 811, 6795, 7131, 7179, 7608, 3897, 4307,
            8610, 8444, 4394, 963, 4250, 9950, 2136, 7759, 8408, 8256, 8562, 823, 7156, 3002, 4889, 7445, 8601, 822, 8181,
            4196, 211, 1753, 1908, 2618, 2862, 7768, 3524, 9912, 1233, 17, 1078, 3741, 4712, 884, 91, 3650, 4000, 6084,
            3313, 2946, 6768, 9518, 6863, 2539, 4229, 4426, 4418, 3055, 5201, 8925, 9037, 429, 3, 17, 5487, 8522, 7227,
            2455, 9313, 4846, 7940, 7731, 9927, 2392, 8202, 7301, 8218, 7004, 76, 7187, 5635, 5939, 2501, 6522, 7244, 5623,
            4757, 1327, 692, 2007, 4308, 4539, 9729, 672, 5741, 6269, 1618, 6341, 5646, 654, 8543, 636, 5716, 5319, 6119,
            2882, 5594, 9067, 174, 3883, 8034, 8434, 4800, 9901, 7880, 894, 8857, 9977, 2991, 5035, 3246, 6681, 4739, 2768,
            5878, 5005, 5101, 5520, 1873, 7073, 1047, 618, 4154, 2963
    };
    std::vector<int> const final_array = {
            3, 17, 17, 23, 63, 76, 79, 91, 174, 211, 429, 437, 523, 618, 636, 654, 672, 692, 768, 811, 822, 823, 884, 894,
            963, 1047, 1064, 1073, 1078, 1227, 1232, 1233, 1327, 1618, 1626, 1693, 1753, 1812, 1858, 1873, 1908, 2007, 2051,
            2136, 2324, 2392, 2429, 2455, 2501, 2502, 2539, 2618, 2678, 2693, 2768, 2862, 2882, 2946, 2963, 2991, 3002,
            3011, 3055, 3246, 3313, 3524, 3590, 3650, 3741, 3883, 3897, 3906, 3945, 3973, 4000, 4091, 4135, 4141, 4154,
            4196, 4214, 4229, 4250, 4307, 4308, 4322, 4394, 4418, 4426, 4507, 4531, 4539, 4712, 4739, 4757, 4800, 4800,
            4846, 4889, 5005, 5035, 5101, 5192, 5201, 5276, 5319, 5448, 5487, 5488, 5520, 5594, 5623, 5635, 5646, 5716,
            5741, 5878, 5878, 5928, 5931, 5939, 6084, 6107, 6119, 6142, 6201, 6269, 6341, 6459, 6522, 6646, 6679, 6681,
            6735, 6768, 6781, 6795, 6806, 6863, 6919, 7004, 7039, 7073, 7131, 7156, 7179, 7187, 7227, 7244, 7301, 7428,
            7445, 7608, 7619, 7731, 7759, 7768, 7880, 7940, 7984, 8034, 8131, 8181, 8202, 8218, 8256, 8408, 8427, 8434,
            8444, 8502, 8522, 8543, 8562, 8594, 8601, 8610, 8688, 8712, 8857, 8899, 8925, 9037, 9067, 9110, 9313, 9436,
            9518, 9519, 9522, 9592, 9632, 9728, 9729, 9776, 9901, 9912, 9927, 9950, 9977
    };
    IntroSort::heapSort(arr, static_cast<int>(arr.size()));

    return std::equal(std::begin(arr), std::end(arr), std::begin(final_array));
}

bool test_heap_sort_std_array()
{
    std::array<int, 200> arr = {
            523, 6107, 9436, 1693, 8899, 2324, 9632, 1073, 1626, 4531, 9728, 9776, 6781, 7619, 3011, 4507, 3945, 9592, 768,
            8688, 5931, 5878, 2429, 2678, 8712, 1232, 9519, 3906, 79, 4800, 1858, 7984, 5192, 6806, 1064, 6919, 1812, 437,
            6459, 8502, 8594, 9110, 2051, 6679, 6142, 23, 4135, 8427, 4322, 2502, 4214, 63, 6201, 7039, 8131, 1227, 4141,
            3590, 5488, 6646, 2693, 4091, 6735, 9522, 5276, 3973, 5448, 5928, 7428, 811, 6795, 7131, 7179, 7608, 3897, 4307,
            8610, 8444, 4394, 963, 4250, 9950, 2136, 7759, 8408, 8256, 8562, 823, 7156, 3002, 4889, 7445, 8601, 822, 8181,
            4196, 211, 1753, 1908, 2618, 2862, 7768, 3524, 9912, 1233, 17, 1078, 3741, 4712, 884, 91, 3650, 4000, 6084,
            3313, 2946, 6768, 9518, 6863, 2539, 4229, 4426, 4418, 3055, 5201, 8925, 9037, 429, 3, 17, 5487, 8522, 7227,
            2455, 9313, 4846, 7940, 7731, 9927, 2392, 8202, 7301, 8218, 7004, 76, 7187, 5635, 5939, 2501, 6522, 7244, 5623,
            4757, 1327, 692, 2007, 4308, 4539, 9729, 672, 5741, 6269, 1618, 6341, 5646, 654, 8543, 636, 5716, 5319, 6119,
            2882, 5594, 9067, 174, 3883, 8034, 8434, 4800, 9901, 7880, 894, 8857, 9977, 2991, 5035, 3246, 6681, 4739, 2768,
            5878, 5005, 5101, 5520, 1873, 7073, 1047, 618, 4154, 2963
    };
    std::array<int, 200> const final_array = {
            3, 17, 17, 23, 63, 76, 79, 91, 174, 211, 429, 437, 523, 618, 636, 654, 672, 692, 768, 811, 822, 823, 884, 894,
            963, 1047, 1064, 1073, 1078, 1227, 1232, 1233, 1327, 1618, 1626, 1693, 1753, 1812, 1858, 1873, 1908, 2007, 2051,
            2136, 2324, 2392, 2429, 2455, 2501, 2502, 2539, 2618, 2678, 2693, 2768, 2862, 2882, 2946, 2963, 2991, 3002,
            3011, 3055, 3246, 3313, 3524, 3590, 3650, 3741, 3883, 3897, 3906, 3945, 3973, 4000, 4091, 4135, 4141, 4154,
            4196, 4214, 4229, 4250, 4307, 4308, 4322, 4394, 4418, 4426, 4507, 4531, 4539, 4712, 4739, 4757, 4800, 4800,
            4846, 4889, 5005, 5035, 5101, 5192, 5201, 5276, 5319, 5448, 5487, 5488, 5520, 5594, 5623, 5635, 5646, 5716,
            5741, 5878, 5878, 5928, 5931, 5939, 6084, 6107, 6119, 6142, 6201, 6269, 6341, 6459, 6522, 6646, 6679, 6681,
            6735, 6768, 6781, 6795, 6806, 6863, 6919, 7004, 7039, 7073, 7131, 7156, 7179, 7187, 7227, 7244, 7301, 7428,
            7445, 7608, 7619, 7731, 7759, 7768, 7880, 7940, 7984, 8034, 8131, 8181, 8202, 8218, 8256, 8408, 8427, 8434,
            8444, 8502, 8522, 8543, 8562, 8594, 8601, 8610, 8688, 8712, 8857, 8899, 8925, 9037, 9067, 9110, 9313, 9436,
            9518, 9519, 9522, 9592, 9632, 9728, 9729, 9776, 9901, 9912, 9927, 9950, 9977
    };
    IntroSort::heapSort(arr, static_cast<int>(arr.size()));

    return std::equal(std::begin(arr), std::end(arr), std::begin(final_array));
}

bool test_merge_array()
{
    int arr[] = {2, 13, 9, 19, 5, 11, 4, 1, 20, 7};
    int constexpr final_arr[]{2, 11, 4, 1, 13, 9, 19, 5, 20, 7};
    IntroSort::merge(arr, 0, 4, 9);
    return std::equal(std::begin(arr), std::end(arr), std::begin(final_arr));
}

bool test_merge_std_vector()
{
    std::vector<int> arr = {2, 13, 9, 19, 5, 11, 4, 1, 20, 7};
    std::vector<int> const final_arr = {2, 11, 4, 1, 13, 9, 19, 5, 20, 7};
    IntroSort::merge(arr, 0, 4, 9);
    return std::equal(std::begin(arr), std::end(arr), std::begin(final_arr));
}

bool test_merge_std_array()
{
    std::array<int, 10> arr = {2, 13, 9, 19, 5, 11, 4, 1, 20, 7};
    std::array<int, 10> const final_arr = {2, 11, 4, 1, 13, 9, 19, 5, 20, 7};
    IntroSort::merge(arr, 0, 4, 9);
    return std::equal(std::begin(arr), std::end(arr), std::begin(final_arr));
}

bool test_insertion_sort_array()
{
    int arr[] = {
            523, 6107, 9436, 1693, 8899, 2324, 9632, 1073, 1626, 4531, 9728, 9776, 6781, 7619, 3011, 4507, 3945, 9592, 768,
            8688, 5931, 5878, 2429, 2678, 8712, 1232, 9519, 3906, 79, 4800, 1858, 7984, 5192, 6806, 1064, 6919, 1812, 437,
            6459, 8502, 8594, 9110, 2051, 6679, 6142, 23, 4135, 8427, 4322, 2502, 4214, 63, 6201, 7039, 8131, 1227, 4141,
            3590, 5488, 6646, 2693, 4091, 6735, 9522, 5276, 3973, 5448, 5928, 7428, 811, 6795, 7131, 7179, 7608, 3897, 4307,
            8610, 8444, 4394, 963, 4250, 9950, 2136, 7759, 8408, 8256, 8562, 823, 7156, 3002, 4889, 7445, 8601, 822, 8181,
            4196, 211, 1753, 1908, 2618, 2862, 7768, 3524, 9912, 1233, 17, 1078, 3741, 4712, 884, 91, 3650, 4000, 6084,
            3313, 2946, 6768, 9518, 6863, 2539, 4229, 4426, 4418, 3055, 5201, 8925, 9037, 429, 3, 17, 5487, 8522, 7227,
            2455, 9313, 4846, 7940, 7731, 9927, 2392, 8202, 7301, 8218, 7004, 76, 7187, 5635, 5939, 2501, 6522, 7244, 5623,
            4757, 1327, 692, 2007, 4308, 4539, 9729, 672, 5741, 6269, 1618, 6341, 5646, 654, 8543, 636, 5716, 5319, 6119,
            2882, 5594, 9067, 174, 3883, 8034, 8434, 4800, 9901, 7880, 894, 8857, 9977, 2991, 5035, 3246, 6681, 4739, 2768,
            5878, 5005, 5101, 5520, 1873, 7073, 1047, 618, 4154, 2963
    };
    int constexpr final_array[] = {
            3, 17, 17, 23, 63, 76, 79, 91, 174, 211, 429, 437, 523, 618, 636, 654, 672, 692, 768, 811, 822, 823, 884, 894,
            963, 1047, 1064, 1073, 1078, 1227, 1232, 1233, 1327, 1618, 1626, 1693, 1753, 1812, 1858, 1873, 1908, 2007, 2051,
            2136, 2324, 2392, 2429, 2455, 2501, 2502, 2539, 2618, 2678, 2693, 2768, 2862, 2882, 2946, 2963, 2991, 3002,
            3011, 3055, 3246, 3313, 3524, 3590, 3650, 3741, 3883, 3897, 3906, 3945, 3973, 4000, 4091, 4135, 4141, 4154,
            4196, 4214, 4229, 4250, 4307, 4308, 4322, 4394, 4418, 4426, 4507, 4531, 4539, 4712, 4739, 4757, 4800, 4800,
            4846, 4889, 5005, 5035, 5101, 5192, 5201, 5276, 5319, 5448, 5487, 5488, 5520, 5594, 5623, 5635, 5646, 5716,
            5741, 5878, 5878, 5928, 5931, 5939, 6084, 6107, 6119, 6142, 6201, 6269, 6341, 6459, 6522, 6646, 6679, 6681,
            6735, 6768, 6781, 6795, 6806, 6863, 6919, 7004, 7039, 7073, 7131, 7156, 7179, 7187, 7227, 7244, 7301, 7428,
            7445, 7608, 7619, 7731, 7759, 7768, 7880, 7940, 7984, 8034, 8131, 8181, 8202, 8218, 8256, 8408, 8427, 8434,
            8444, 8502, 8522, 8543, 8562, 8594, 8601, 8610, 8688, 8712, 8857, 8899, 8925, 9037, 9067, 9110, 9313, 9436,
            9518, 9519, 9522, 9592, 9632, 9728, 9729, 9776, 9901, 9912, 9927, 9950, 9977
    };
    IntroSort::insertionSort(arr, static_cast<int>(std::size(arr)));

    return std::equal(std::begin(arr), std::end(arr), std::begin(final_array));
}

bool test_insertion_sort_std_vector()
{
    std::vector<int> arr = {
            523, 6107, 9436, 1693, 8899, 2324, 9632, 1073, 1626, 4531, 9728, 9776, 6781, 7619, 3011, 4507, 3945, 9592, 768,
            8688, 5931, 5878, 2429, 2678, 8712, 1232, 9519, 3906, 79, 4800, 1858, 7984, 5192, 6806, 1064, 6919, 1812, 437,
            6459, 8502, 8594, 9110, 2051, 6679, 6142, 23, 4135, 8427, 4322, 2502, 4214, 63, 6201, 7039, 8131, 1227, 4141,
            3590, 5488, 6646, 2693, 4091, 6735, 9522, 5276, 3973, 5448, 5928, 7428, 811, 6795, 7131, 7179, 7608, 3897, 4307,
            8610, 8444, 4394, 963, 4250, 9950, 2136, 7759, 8408, 8256, 8562, 823, 7156, 3002, 4889, 7445, 8601, 822, 8181,
            4196, 211, 1753, 1908, 2618, 2862, 7768, 3524, 9912, 1233, 17, 1078, 3741, 4712, 884, 91, 3650, 4000, 6084,
            3313, 2946, 6768, 9518, 6863, 2539, 4229, 4426, 4418, 3055, 5201, 8925, 9037, 429, 3, 17, 5487, 8522, 7227,
            2455, 9313, 4846, 7940, 7731, 9927, 2392, 8202, 7301, 8218, 7004, 76, 7187, 5635, 5939, 2501, 6522, 7244, 5623,
            4757, 1327, 692, 2007, 4308, 4539, 9729, 672, 5741, 6269, 1618, 6341, 5646, 654, 8543, 636, 5716, 5319, 6119,
            2882, 5594, 9067, 174, 3883, 8034, 8434, 4800, 9901, 7880, 894, 8857, 9977, 2991, 5035, 3246, 6681, 4739, 2768,
            5878, 5005, 5101, 5520, 1873, 7073, 1047, 618, 4154, 2963
    };
    std::vector<int> const final_array = {
            3, 17, 17, 23, 63, 76, 79, 91, 174, 211, 429, 437, 523, 618, 636, 654, 672, 692, 768, 811, 822, 823, 884, 894,
            963, 1047, 1064, 1073, 1078, 1227, 1232, 1233, 1327, 1618, 1626, 1693, 1753, 1812, 1858, 1873, 1908, 2007, 2051,
            2136, 2324, 2392, 2429, 2455, 2501, 2502, 2539, 2618, 2678, 2693, 2768, 2862, 2882, 2946, 2963, 2991, 3002,
            3011, 3055, 3246, 3313, 3524, 3590, 3650, 3741, 3883, 3897, 3906, 3945, 3973, 4000, 4091, 4135, 4141, 4154,
            4196, 4214, 4229, 4250, 4307, 4308, 4322, 4394, 4418, 4426, 4507, 4531, 4539, 4712, 4739, 4757, 4800, 4800,
            4846, 4889, 5005, 5035, 5101, 5192, 5201, 5276, 5319, 5448, 5487, 5488, 5520, 5594, 5623, 5635, 5646, 5716,
            5741, 5878, 5878, 5928, 5931, 5939, 6084, 6107, 6119, 6142, 6201, 6269, 6341, 6459, 6522, 6646, 6679, 6681,
            6735, 6768, 6781, 6795, 6806, 6863, 6919, 7004, 7039, 7073, 7131, 7156, 7179, 7187, 7227, 7244, 7301, 7428,
            7445, 7608, 7619, 7731, 7759, 7768, 7880, 7940, 7984, 8034, 8131, 8181, 8202, 8218, 8256, 8408, 8427, 8434,
            8444, 8502, 8522, 8543, 8562, 8594, 8601, 8610, 8688, 8712, 8857, 8899, 8925, 9037, 9067, 9110, 9313, 9436,
            9518, 9519, 9522, 9592, 9632, 9728, 9729, 9776, 9901, 9912, 9927, 9950, 9977
    };
    IntroSort::insertionSort(arr, static_cast<int>(arr.size()));

    return std::equal(std::begin(arr), std::end(arr), std::begin(final_array));
}

bool test_insertion_sort_std_array()
{
    std::array<int, 200> arr = {
            523, 6107, 9436, 1693, 8899, 2324, 9632, 1073, 1626, 4531, 9728, 9776, 6781, 7619, 3011, 4507, 3945, 9592, 768,
            8688, 5931, 5878, 2429, 2678, 8712, 1232, 9519, 3906, 79, 4800, 1858, 7984, 5192, 6806, 1064, 6919, 1812, 437,
            6459, 8502, 8594, 9110, 2051, 6679, 6142, 23, 4135, 8427, 4322, 2502, 4214, 63, 6201, 7039, 8131, 1227, 4141,
            3590, 5488, 6646, 2693, 4091, 6735, 9522, 5276, 3973, 5448, 5928, 7428, 811, 6795, 7131, 7179, 7608, 3897, 4307,
            8610, 8444, 4394, 963, 4250, 9950, 2136, 7759, 8408, 8256, 8562, 823, 7156, 3002, 4889, 7445, 8601, 822, 8181,
            4196, 211, 1753, 1908, 2618, 2862, 7768, 3524, 9912, 1233, 17, 1078, 3741, 4712, 884, 91, 3650, 4000, 6084,
            3313, 2946, 6768, 9518, 6863, 2539, 4229, 4426, 4418, 3055, 5201, 8925, 9037, 429, 3, 17, 5487, 8522, 7227,
            2455, 9313, 4846, 7940, 7731, 9927, 2392, 8202, 7301, 8218, 7004, 76, 7187, 5635, 5939, 2501, 6522, 7244, 5623,
            4757, 1327, 692, 2007, 4308, 4539, 9729, 672, 5741, 6269, 1618, 6341, 5646, 654, 8543, 636, 5716, 5319, 6119,
            2882, 5594, 9067, 174, 3883, 8034, 8434, 4800, 9901, 7880, 894, 8857, 9977, 2991, 5035, 3246, 6681, 4739, 2768,
            5878, 5005, 5101, 5520, 1873, 7073, 1047, 618, 4154, 2963
    };
    std::array<int, 200> const final_array = {
            3, 17, 17, 23, 63, 76, 79, 91, 174, 211, 429, 437, 523, 618, 636, 654, 672, 692, 768, 811, 822, 823, 884, 894,
            963, 1047, 1064, 1073, 1078, 1227, 1232, 1233, 1327, 1618, 1626, 1693, 1753, 1812, 1858, 1873, 1908, 2007, 2051,
            2136, 2324, 2392, 2429, 2455, 2501, 2502, 2539, 2618, 2678, 2693, 2768, 2862, 2882, 2946, 2963, 2991, 3002,
            3011, 3055, 3246, 3313, 3524, 3590, 3650, 3741, 3883, 3897, 3906, 3945, 3973, 4000, 4091, 4135, 4141, 4154,
            4196, 4214, 4229, 4250, 4307, 4308, 4322, 4394, 4418, 4426, 4507, 4531, 4539, 4712, 4739, 4757, 4800, 4800,
            4846, 4889, 5005, 5035, 5101, 5192, 5201, 5276, 5319, 5448, 5487, 5488, 5520, 5594, 5623, 5635, 5646, 5716,
            5741, 5878, 5878, 5928, 5931, 5939, 6084, 6107, 6119, 6142, 6201, 6269, 6341, 6459, 6522, 6646, 6679, 6681,
            6735, 6768, 6781, 6795, 6806, 6863, 6919, 7004, 7039, 7073, 7131, 7156, 7179, 7187, 7227, 7244, 7301, 7428,
            7445, 7608, 7619, 7731, 7759, 7768, 7880, 7940, 7984, 8034, 8131, 8181, 8202, 8218, 8256, 8408, 8427, 8434,
            8444, 8502, 8522, 8543, 8562, 8594, 8601, 8610, 8688, 8712, 8857, 8899, 8925, 9037, 9067, 9110, 9313, 9436,
            9518, 9519, 9522, 9592, 9632, 9728, 9729, 9776, 9901, 9912, 9927, 9950, 9977
    };
    IntroSort::insertionSort(arr, static_cast<int>(arr.size()));

    return std::equal(std::begin(arr), std::end(arr), std::begin(final_array));
}

bool test_sort_array()
{
    int arr[] = {
            523, 6107, 9436, 1693, 8899, 2324, 9632, 1073, 1626, 4531, 9728, 9776, 6781, 7619, 3011, 4507, 3945, 9592, 768,
            8688, 5931, 5878, 2429, 2678, 8712, 1232, 9519, 3906, 79, 4800, 1858, 7984, 5192, 6806, 1064, 6919, 1812, 437,
            6459, 8502, 8594, 9110, 2051, 6679, 6142, 23, 4135, 8427, 4322, 2502, 4214, 63, 6201, 7039, 8131, 1227, 4141,
            3590, 5488, 6646, 2693, 4091, 6735, 9522, 5276, 3973, 5448, 5928, 7428, 811, 6795, 7131, 7179, 7608, 3897, 4307,
            8610, 8444, 4394, 963, 4250, 9950, 2136, 7759, 8408, 8256, 8562, 823, 7156, 3002, 4889, 7445, 8601, 822, 8181,
            4196, 211, 1753, 1908, 2618, 2862, 7768, 3524, 9912, 1233, 17, 1078, 3741, 4712, 884, 91, 3650, 4000, 6084,
            3313, 2946, 6768, 9518, 6863, 2539, 4229, 4426, 4418, 3055, 5201, 8925, 9037, 429, 3, 17, 5487, 8522, 7227,
            2455, 9313, 4846, 7940, 7731, 9927, 2392, 8202, 7301, 8218, 7004, 76, 7187, 5635, 5939, 2501, 6522, 7244, 5623,
            4757, 1327, 692, 2007, 4308, 4539, 9729, 672, 5741, 6269, 1618, 6341, 5646, 654, 8543, 636, 5716, 5319, 6119,
            2882, 5594, 9067, 174, 3883, 8034, 8434, 4800, 9901, 7880, 894, 8857, 9977, 2991, 5035, 3246, 6681, 4739, 2768,
            5878, 5005, 5101, 5520, 1873, 7073, 1047, 618, 4154, 2963
    };
    int constexpr final_array[] = {
            3, 17, 17, 23, 63, 76, 79, 91, 174, 211, 429, 437, 523, 618, 636, 654, 672, 692, 768, 811, 822, 823, 884, 894,
            963, 1047, 1064, 1073, 1078, 1227, 1232, 1233, 1327, 1618, 1626, 1693, 1753, 1812, 1858, 1873, 1908, 2007, 2051,
            2136, 2324, 2392, 2429, 2455, 2501, 2502, 2539, 2618, 2678, 2693, 2768, 2862, 2882, 2946, 2963, 2991, 3002,
            3011, 3055, 3246, 3313, 3524, 3590, 3650, 3741, 3883, 3897, 3906, 3945, 3973, 4000, 4091, 4135, 4141, 4154,
            4196, 4214, 4229, 4250, 4307, 4308, 4322, 4394, 4418, 4426, 4507, 4531, 4539, 4712, 4739, 4757, 4800, 4800,
            4846, 4889, 5005, 5035, 5101, 5192, 5201, 5276, 5319, 5448, 5487, 5488, 5520, 5594, 5623, 5635, 5646, 5716,
            5741, 5878, 5878, 5928, 5931, 5939, 6084, 6107, 6119, 6142, 6201, 6269, 6341, 6459, 6522, 6646, 6679, 6681,
            6735, 6768, 6781, 6795, 6806, 6863, 6919, 7004, 7039, 7073, 7131, 7156, 7179, 7187, 7227, 7244, 7301, 7428,
            7445, 7608, 7619, 7731, 7759, 7768, 7880, 7940, 7984, 8034, 8131, 8181, 8202, 8218, 8256, 8408, 8427, 8434,
            8444, 8502, 8522, 8543, 8562, 8594, 8601, 8610, 8688, 8712, 8857, 8899, 8925, 9037, 9067, 9110, 9313, 9436,
            9518, 9519, 9522, 9592, 9632, 9728, 9729, 9776, 9901, 9912, 9927, 9950, 9977
    };
    IntroSort::sort(arr, static_cast<int>(std::size(arr)));

    return std::equal(std::begin(arr), std::end(arr), std::begin(final_array));
}

bool test_sort_std_vector()
{
    std::vector<int> arr = {
            523, 6107, 9436, 1693, 8899, 2324, 9632, 1073, 1626, 4531, 9728, 9776, 6781, 7619, 3011, 4507, 3945, 9592, 768,
            8688, 5931, 5878, 2429, 2678, 8712, 1232, 9519, 3906, 79, 4800, 1858, 7984, 5192, 6806, 1064, 6919, 1812, 437,
            6459, 8502, 8594, 9110, 2051, 6679, 6142, 23, 4135, 8427, 4322, 2502, 4214, 63, 6201, 7039, 8131, 1227, 4141,
            3590, 5488, 6646, 2693, 4091, 6735, 9522, 5276, 3973, 5448, 5928, 7428, 811, 6795, 7131, 7179, 7608, 3897, 4307,
            8610, 8444, 4394, 963, 4250, 9950, 2136, 7759, 8408, 8256, 8562, 823, 7156, 3002, 4889, 7445, 8601, 822, 8181,
            4196, 211, 1753, 1908, 2618, 2862, 7768, 3524, 9912, 1233, 17, 1078, 3741, 4712, 884, 91, 3650, 4000, 6084,
            3313, 2946, 6768, 9518, 6863, 2539, 4229, 4426, 4418, 3055, 5201, 8925, 9037, 429, 3, 17, 5487, 8522, 7227,
            2455, 9313, 4846, 7940, 7731, 9927, 2392, 8202, 7301, 8218, 7004, 76, 7187, 5635, 5939, 2501, 6522, 7244, 5623,
            4757, 1327, 692, 2007, 4308, 4539, 9729, 672, 5741, 6269, 1618, 6341, 5646, 654, 8543, 636, 5716, 5319, 6119,
            2882, 5594, 9067, 174, 3883, 8034, 8434, 4800, 9901, 7880, 894, 8857, 9977, 2991, 5035, 3246, 6681, 4739, 2768,
            5878, 5005, 5101, 5520, 1873, 7073, 1047, 618, 4154, 2963
    };
    std::vector<int> const final_array = {
            3, 17, 17, 23, 63, 76, 79, 91, 174, 211, 429, 437, 523, 618, 636, 654, 672, 692, 768, 811, 822, 823, 884, 894,
            963, 1047, 1064, 1073, 1078, 1227, 1232, 1233, 1327, 1618, 1626, 1693, 1753, 1812, 1858, 1873, 1908, 2007, 2051,
            2136, 2324, 2392, 2429, 2455, 2501, 2502, 2539, 2618, 2678, 2693, 2768, 2862, 2882, 2946, 2963, 2991, 3002,
            3011, 3055, 3246, 3313, 3524, 3590, 3650, 3741, 3883, 3897, 3906, 3945, 3973, 4000, 4091, 4135, 4141, 4154,
            4196, 4214, 4229, 4250, 4307, 4308, 4322, 4394, 4418, 4426, 4507, 4531, 4539, 4712, 4739, 4757, 4800, 4800,
            4846, 4889, 5005, 5035, 5101, 5192, 5201, 5276, 5319, 5448, 5487, 5488, 5520, 5594, 5623, 5635, 5646, 5716,
            5741, 5878, 5878, 5928, 5931, 5939, 6084, 6107, 6119, 6142, 6201, 6269, 6341, 6459, 6522, 6646, 6679, 6681,
            6735, 6768, 6781, 6795, 6806, 6863, 6919, 7004, 7039, 7073, 7131, 7156, 7179, 7187, 7227, 7244, 7301, 7428,
            7445, 7608, 7619, 7731, 7759, 7768, 7880, 7940, 7984, 8034, 8131, 8181, 8202, 8218, 8256, 8408, 8427, 8434,
            8444, 8502, 8522, 8543, 8562, 8594, 8601, 8610, 8688, 8712, 8857, 8899, 8925, 9037, 9067, 9110, 9313, 9436,
            9518, 9519, 9522, 9592, 9632, 9728, 9729, 9776, 9901, 9912, 9927, 9950, 9977
    };
    IntroSort::sort(arr, static_cast<int>(arr.size()));

    return std::equal(std::begin(arr), std::end(arr), std::begin(final_array));
}

bool test_sort_std_array()
{
    std::array<int, 200> arr = {
            523, 6107, 9436, 1693, 8899, 2324, 9632, 1073, 1626, 4531, 9728, 9776, 6781, 7619, 3011, 4507, 3945, 9592, 768,
            8688, 5931, 5878, 2429, 2678, 8712, 1232, 9519, 3906, 79, 4800, 1858, 7984, 5192, 6806, 1064, 6919, 1812, 437,
            6459, 8502, 8594, 9110, 2051, 6679, 6142, 23, 4135, 8427, 4322, 2502, 4214, 63, 6201, 7039, 8131, 1227, 4141,
            3590, 5488, 6646, 2693, 4091, 6735, 9522, 5276, 3973, 5448, 5928, 7428, 811, 6795, 7131, 7179, 7608, 3897, 4307,
            8610, 8444, 4394, 963, 4250, 9950, 2136, 7759, 8408, 8256, 8562, 823, 7156, 3002, 4889, 7445, 8601, 822, 8181,
            4196, 211, 1753, 1908, 2618, 2862, 7768, 3524, 9912, 1233, 17, 1078, 3741, 4712, 884, 91, 3650, 4000, 6084,
            3313, 2946, 6768, 9518, 6863, 2539, 4229, 4426, 4418, 3055, 5201, 8925, 9037, 429, 3, 17, 5487, 8522, 7227,
            2455, 9313, 4846, 7940, 7731, 9927, 2392, 8202, 7301, 8218, 7004, 76, 7187, 5635, 5939, 2501, 6522, 7244, 5623,
            4757, 1327, 692, 2007, 4308, 4539, 9729, 672, 5741, 6269, 1618, 6341, 5646, 654, 8543, 636, 5716, 5319, 6119,
            2882, 5594, 9067, 174, 3883, 8034, 8434, 4800, 9901, 7880, 894, 8857, 9977, 2991, 5035, 3246, 6681, 4739, 2768,
            5878, 5005, 5101, 5520, 1873, 7073, 1047, 618, 4154, 2963
    };
    std::array<int, 200> const final_array = {
            3, 17, 17, 23, 63, 76, 79, 91, 174, 211, 429, 437, 523, 618, 636, 654, 672, 692, 768, 811, 822, 823, 884, 894,
            963, 1047, 1064, 1073, 1078, 1227, 1232, 1233, 1327, 1618, 1626, 1693, 1753, 1812, 1858, 1873, 1908, 2007, 2051,
            2136, 2324, 2392, 2429, 2455, 2501, 2502, 2539, 2618, 2678, 2693, 2768, 2862, 2882, 2946, 2963, 2991, 3002,
            3011, 3055, 3246, 3313, 3524, 3590, 3650, 3741, 3883, 3897, 3906, 3945, 3973, 4000, 4091, 4135, 4141, 4154,
            4196, 4214, 4229, 4250, 4307, 4308, 4322, 4394, 4418, 4426, 4507, 4531, 4539, 4712, 4739, 4757, 4800, 4800,
            4846, 4889, 5005, 5035, 5101, 5192, 5201, 5276, 5319, 5448, 5487, 5488, 5520, 5594, 5623, 5635, 5646, 5716,
            5741, 5878, 5878, 5928, 5931, 5939, 6084, 6107, 6119, 6142, 6201, 6269, 6341, 6459, 6522, 6646, 6679, 6681,
            6735, 6768, 6781, 6795, 6806, 6863, 6919, 7004, 7039, 7073, 7131, 7156, 7179, 7187, 7227, 7244, 7301, 7428,
            7445, 7608, 7619, 7731, 7759, 7768, 7880, 7940, 7984, 8034, 8131, 8181, 8202, 8218, 8256, 8408, 8427, 8434,
            8444, 8502, 8522, 8543, 8562, 8594, 8601, 8610, 8688, 8712, 8857, 8899, 8925, 9037, 9067, 9110, 9313, 9436,
            9518, 9519, 9522, 9592, 9632, 9728, 9729, 9776, 9901, 9912, 9927, 9950, 9977
    };
    IntroSort::sort(arr, static_cast<int>(arr.size()));

    return std::equal(std::begin(arr), std::end(arr), std::begin(final_array));
}

bool test_sum_iterator()
{
    int arr[] = {
            1, 2, 3, 4, 5, 6
    };
    return IntroSort::sum(std::begin(arr), std::end(arr)) == std::accumulate(arr, arr+6, 0);
}

bool test_swap_iterator()
{
    int arr[] = { 1, 2, 3 };
    int arrFinal[] = { 2, 1, 3 };
    std::vector arrVector = { 1, 2, 3 };
    std::vector arrVectorFinal = { 2, 1, 3 };
    std::array<int, 3> arrArray = { 1, 2, 3 };
    std::array<int, 3> arrArrayFinal = { 2, 1, 3 };


    IntroSort::swap(std::begin(arr), std::begin(arr)+1);
    IntroSort::swap(std::begin(arrVector), std::begin(arrVector)+1);
    IntroSort::swap(std::begin(arrArray), std::begin(arrArray)+1);

    for (auto i : arr)
      std::cout << i << " ";
    std::cout << std::endl;
    for (auto i : arrVector)
      std::cout << i << " ";
    std::cout << std::endl;
    for (auto i : arrArray)
      std::cout << i << " ";
    std::cout << std::endl;

    return std::equal(std::begin(arr), std::end(arr), std::begin(arrFinal)) &&
        std::equal(std::begin(arrArray), std::end(arrArray), std::begin(arrArrayFinal)) &&
        std::equal(std::begin(arrVector), std::end(arrVector), std::begin(arrVectorFinal));
}

void msg(std::string const& str, int const err)
{
    err
    ? std::cout << "\033[1;31m" << str << "\033[0m" << std::endl // \033[1;31m and the \033[0m turn the text between them red in the terminal
    : std::cout << "\033[1;32m" << str << "\033[0m" << std::endl; // \033[1;33m and the \033[0m turn the text between them green in the terminal
}


enum PassCode
{
    Fail = 1,
    Success = 0
};

int main()
{
    try
    {
        test_depth_limit() ? msg("test_depth_limit successful!", Success) : msg("test_depth_limit failed!", Fail);
        test_depth_limit_array()
        ? msg("test_depth_limit_array successful!", Success)
        : msg("test_depth_limit_array failed!", Fail);
        test_depth_limit_std_vector()
        ? msg("test_depth_limit_std_vector successful!", Success)
        : msg("test_depth_limit_std_vector failed!", Fail);
        test_depth_limit_std_array()
        ? msg("test_depth_limit_std_array successful!", Success)
        : msg("test_depth_limit_std_array failed!", Fail);
        test_swap() ? msg("test_swap successful!", Success) : msg("test_swap failed!", Fail);
        test_swap_array() ? msg("test_swap_array successful!", Success) : msg("test_swap_array failed!", Fail);
        test_swap_std_vector() ? msg("test_swap_std_vector successful!", Success) : msg("test_swap_std_vector failed!", Fail);
        test_swap_std_array() ? msg("test_swap_std_array successful!", Success) : msg("test_swap_std_array failed!", Fail);
        test_partition_array() ? msg("test_partition_array successful!", Success) : msg("test_partition_array failed!", Fail);
        test_partition_std_vector()
        ? msg("test_partition_std_vector successful!", Success)
        : msg("test_partition_std_vector failed!", Fail);
        test_partition_std_array()
        ? msg("test_partition_std_array successful!", Success)
        : msg("test_partition_std_array failed!", Fail);
        test_quick_sort_array() ? msg("test_quick_sort_array successful!", Success) : msg("test_quick_sort_array failed!", Fail);
        test_quick_sort_std_vector()
        ? msg("test_quick_sort_std_vector successful!", Success)
        : msg("test_quick_sort_std_vector failed!", Fail);
        test_quick_sort_std_array()
        ? msg("test_quick_sort_std_array successful!", Success)
        : msg("test_quick_sort_std_array failed!", Fail);
        test_make_heap_array()
        ? msg("test_make_heap_array successful!", Success)
        : msg("test_make_heap_array failed!", Fail);
        test_make_heap_std_vector()
        ? msg("test_make_heap_std_vector successful!", Success)
        : msg("test_make_heap_std_vector failed!", Fail);
        test_make_heap_std_array()
        ? msg("test_make_heap_std_array successful!", Success)
        : msg("test_make_heap_std_array failed!", Fail);
        test_heap_sort_array()
        ? msg("test_heap_sort_array successful!", Success)
        : msg("test_heap_sort_array failed!", Fail);
        test_heap_sort_std_vector()
        ? msg("test_heap_sort_std_vector successful!", Success)
        : msg("test_heap_sort_std_vector failed!", Fail);
        test_heap_sort_std_array()
        ? msg("test_heap_sort_std_array successful!", Success)
        : msg("test_heap_sort_std_array failed!", Fail);
        test_merge_array()
        ? msg("test_merge_array successful!", Success)
        : msg("test_merge_array failed!", Fail);
        test_merge_std_vector()
        ? msg("test_merge_std_vector successful!", Success)
        : msg("test_merge_std_vector failed!", Fail);
        test_merge_std_array()
        ? msg("test_merge_std_array successful!", Success)
        : msg("test_merge_std_array failed!", Fail);
        test_insertion_sort_array()
        ? msg("test_insertion_sort_array successful!", Success)
        : msg("test_insertion_sort_array failed!", Fail);
        test_insertion_sort_std_vector()
        ? msg("test_insertion_sort_std_vector successful!", Success)
        : msg("test_insertion_sort_std_vector failed!", Fail);
        test_insertion_sort_std_array()
        ? msg("test_insertion_sort_std_array successful!", Success)
        : msg("test_insertion_sort_std_array failed!", Fail);
        test_sort_array()
        ? msg("test_sort_array successful!", Success)
        : msg("test_sort_array failed!", Fail);
        test_sort_std_vector()
        ? msg("test_sort_std_vector successful!", Success)
        : msg("test_sort_std_vector failed!", Fail);
        test_sort_std_array()
        ? msg("test_sort_std_array successful!", Success)
        : msg("test_sort_std_array failed!", Fail);
        test_sum_iterator()
        ? msg("test_sum_iterator successful!", Success)
        : msg("test_sum_iterator failed!", Fail);
        test_swap_iterator()
        ? msg("test_swap_iterator successful!", Success)
        : msg("test_swap_iterator failed!", Fail);
    }
    catch (...)
    {
        std::cout << "An error was thrown!" << std::endl;
        return 1;
    }
    return 0;
}